[{"/home/suryu/AcademicPerformance/frontend/src/index.js":"1","/home/suryu/AcademicPerformance/frontend/src/App.js":"2","/home/suryu/AcademicPerformance/frontend/src/reportWebVitals.js":"3","/home/suryu/AcademicPerformance/frontend/src/screens/Login.js":"4","/home/suryu/AcademicPerformance/frontend/src/screens/Student.js":"5","/home/suryu/AcademicPerformance/frontend/src/screens/Teacher.js":"6","/home/suryu/AcademicPerformance/frontend/src/screens/Admin.js":"7","/home/suryu/AcademicPerformance/frontend/src/screens/Chart.js":"8","/home/suryu/AcademicPerformance/frontend/src/screens/Info.js":"9","/home/suryu/AcademicPerformance/frontend/src/screens/Remarks.js":"10","/home/suryu/AcademicPerformance/frontend/src/screens/Title.js":"11"},{"size":628,"mtime":1626365544663,"results":"12","hashOfConfig":"13"},{"size":2446,"mtime":1626365544663,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1626365544663,"results":"15","hashOfConfig":"13"},{"size":5901,"mtime":1626365544663,"results":"16","hashOfConfig":"13"},{"size":11372,"mtime":1626416051193,"results":"17","hashOfConfig":"13"},{"size":18765,"mtime":1626416124697,"results":"18","hashOfConfig":"13"},{"size":33282,"mtime":1626414405983,"results":"19","hashOfConfig":"13"},{"size":1251,"mtime":1626365544663,"results":"20","hashOfConfig":"13"},{"size":2317,"mtime":1626365544663,"results":"21","hashOfConfig":"13"},{"size":1248,"mtime":1626365544663,"results":"22","hashOfConfig":"13"},{"size":367,"mtime":1626365544663,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"oq7j4c",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/suryu/AcademicPerformance/frontend/src/index.js",[],["53","54"],"/home/suryu/AcademicPerformance/frontend/src/App.js",["55"],"import React, { useEffect, useState } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Login from './screens/Login';\nimport Admin from './screens/Admin';\nimport Student from './screens/Student';\nimport Teacher from './screens/Teacher';\nimport create from 'zustand';\n\nexport const useStore = create(set => ({\n  user: null,\n  signIn: (user) => set({user}),\n  signOut: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('firstName');\n    localStorage.removeItem('lastName');\n    localStorage.removeItem('username');\n    localStorage.removeItem('kind');\n    set({user: null});\n  },\n  fetch: () => {\n    const token = localStorage.getItem('token');\n    const firstName = localStorage.getItem('firstName');\n    const lastName = localStorage.getItem('lastName');\n    const username = localStorage.getItem('username');\n    const kind = localStorage.getItem('kind');\n    set({user: {token, firstName, lastName, username, kind}});\n  }\n}))\n\nexport default function App() {\n    const fetch = useStore(state => state.fetch);\n    useEffect(() => fetch());\n    return (\n      <div className=\"h-100\">\n        <Switch>\n          <LoginRoute path=\"/\" exact>\n            <Login/>\n          </LoginRoute>\n           <PrivateRoute path=\"/student\" kind=\"student\">\n              <Student />\n            </PrivateRoute>\n           <PrivateRoute path=\"/admin\" kind=\"admin\">\n              <Admin />\n            </PrivateRoute>\n           <PrivateRoute path=\"/teacher\" kind=\"teacher\">\n              <Teacher />\n            </PrivateRoute>\n        </Switch>\n      </div>\n    );\n}\n\nfunction PrivateRoute({ children, kind, ...rest }) {\n  const user = useStore(state => state.user);\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        user != null && user.kind === kind ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nfunction LoginRoute({ children, ...rest }) {\n  const user = useStore(state => state.user);\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        user === null || user.kind === null ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\" + user.kind,\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n","/home/suryu/AcademicPerformance/frontend/src/reportWebVitals.js",[],"/home/suryu/AcademicPerformance/frontend/src/screens/Login.js",["56","57"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Box from '@material-ui/core/Box';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {useStore} from '../App';\n\nimport axios from 'axios';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nconst Copyright = () => {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright Â© '}\n            <Link color=\"inherit\" to=\"/\">\n                Performance Monitor\n      </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nexport default function Login() {\n    const history = useHistory();\n    const classes = useStyles();\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [open, setOpen] = useState(false);\n\n    const signIn = useStore(state => state.signIn);\n    const user = useStore(state => state.user);\n    const fetch = useStore(state => state.fetch);\n\n    useEffect(() => {\n        // fetch();\n        console.log(user);\n        if(user != null && user.kind !== null) history.push(\"/\" + user.kind);\n    }, []);\n\n    const handleLogin = (event) => {\n        event.preventDefault();\n        axios.post('http://localhost:8080/api/users/login', {\n            username, password\n        }).then(response => {\n            const { kind, token, username, firstName, lastName } = response.data;\n            if (token == null || token === undefined) {\n                console.log(\"Login Failed\")\n                setOpen(true);\n            }\n            signIn({token, kind, firstName, lastName, username});\n            localStorage.setItem(\"token\", token);\n            localStorage.setItem(\"kind\", kind);\n            localStorage.setItem(\"firstName\", firstName);\n            localStorage.setItem(\"lastName\", lastName);\n            localStorage.setItem(\"username\", username);\n            if (kind === 'student')\n                history.push(\"/student\");\n            if (kind === 'teacher')\n                history.push(\"/teacher\");\n            if (kind === 'admin')\n                history.push(\"/admin\");\n        }).catch(() => {\n            console.log(\"Login Failed\")\n            setOpen(true);\n        })\n    }\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                }}\n                open={open}\n                autoHideDuration={6000}\n                onClose={() => setOpen(false)}\n                message=\"Please Check Your Login Credentials\"\n                action={\n                    <React.Fragment>\n                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={()=> setOpen(false)}>\n                            <CloseIcon fontSize=\"small\" />\n                        </IconButton>\n                    </React.Fragment>\n                }\n            />\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign in\n        </Typography>\n                <form className={classes.form} noValidate onSubmit={event => handleLogin(event)}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"username\"\n                        label=\"Username\"\n                        name=\"username\"\n                        autoComplete=\"username\"\n                        autoFocus\n                        value={username}\n                        onChange={event => setUsername(event.target.value)}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n                        value={password}\n                        onChange={event => setPassword(event.target.value)}\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Sign In\n          </Button>\n                </form>\n            </div>\n            <Box mt={8}>\n                <Copyright />\n            </Box>\n        </Container>\n    );\n}","/home/suryu/AcademicPerformance/frontend/src/screens/Student.js",["58"],"import React, { useEffect, useState, useCallback } from 'react';\nimport {useHistory} from 'react-router-dom';\nimport axios from 'axios';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport SettingsPower from '@material-ui/icons/SettingsPower';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport Chart from './Chart';\nimport Info from './Info';\nimport Remarks from './Remarks';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {useStore} from '../App';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright Â© '}\n            <Link color=\"inherit\" href=\"/\">\n                Performance Monitor\n      </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 36,\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(12),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 360,\n    },\n}));\n\nexport default function Dashboard() {\n    const classes = useStyles();\n    const history = useHistory();\n    const [open, setOpen] = useState(true);\n    const [data, setData] = useState({});\n    const [reports, setReports] = useState([]);\n    const [display, setDisplay] = useState([]);\n    const [comments, setComments] = useState([]);\n    const [visible, setVisible] = useState(true);\n    const user = useStore(useCallback(state => state.user, []));\n    const signOut = useStore(state => state.signOut);\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n    const filter = (mode) => {\n        console.log(reports);\n        const newDisplay = reports.filter(report => mode === 'Mixed' || report.title.split(' ')[0] === mode);\n        console.log(mode, newDisplay);\n        setDisplay(newDisplay);\n    }\n\n    useEffect(() => {\n        const {token} = user;\n        axios.get('http://localhost:8080/api/users/info/student', {\n            headers: {\n                'Authorization': 'Bearer ' + token,\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(response => {\n                console.log(response.data.payload);\n                setData(response.data.payload);\n                axios.get('http://localhost:8080/api/reports/student/' + response.data.payload.studentId, {\n                    headers: {\n                        'Authorization': 'Bearer ' + token,\n                        'Content-Type': 'application/json',\n                    }\n                })\n                    .then(response => {\n                        setReports(response.data.payload);\n                        setDisplay(response.data.payload);\n                    }).catch(err => console.log(err));\n                axios.get('http://localhost:8080/api/comments/' + response.data.payload.studentId, {\n                    headers: {\n                        'Authorization': 'Bearer ' + token,\n                        'Content-Type': 'application/json',\n                    }\n                })\n                    .then(response => {\n                        setComments(response.data.payload);\n                    }).catch(err => console.log(err));\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }, []);\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={visible}\n                autoHideDuration={6000}\n                onClose={() => setVisible(false)}\n                message={\"Logged In Successfully as \" + user.username}\n                action={\n                    <React.Fragment>\n                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => setVisible(false)}>\n                            <CloseIcon fontSize=\"small\" />\n                        </IconButton>\n                    </React.Fragment>\n                }\n            />\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n                <Toolbar className={classes.toolbar}>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                        Student Dashboard\n          </Typography>\n                    <IconButton color=\"inherit\" onClick={() => {signOut();history.push('/')}} >\n                        <SettingsPower />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                classes={{\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n                }}\n                open={open}\n            >\n                <div className={classes.toolbarIcon}>\n                    <IconButton onClick={handleDrawerClose}>\n                        <ChevronLeftIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    <ListItem button onClick={() => filter(\"Mixed\")}>\n                        <ListItemIcon>\n                            <AssignmentIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Mixed\" />\n                    </ListItem>\n                    <ListItem button onClick={() => filter(\"Weekly\")}>\n                        <ListItemIcon>\n                            <AssignmentIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Weekly\" />\n                    </ListItem>\n                    <ListItem button onClick={() => filter(\"Monthly\")}>\n                        <ListItemIcon>\n                            <AssignmentIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Monthly\" />\n                    </ListItem>\n                    <ListItem button onClick={() => filter(\"Yearly\")}>\n                        <ListItemIcon>\n                            <AssignmentIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Yearly\" />\n                    </ListItem>\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.appBarSpacer} />\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={8} lg={9}>\n                            <Paper className={fixedHeightPaper}>\n                                {display.length !== 0 && <Chart reports={display} />}\n                                {!display.length && <p className=\"text-center\"> No data for this criteria </p>}\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={12} md={4} lg={3}>\n                            <Paper className={fixedHeightPaper}>\n                                <Info studentId={data.studentId} dob={data.dob} year={data.year} address={data.address} />\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Paper className={classes.paper}>\n                                {comments.length !== 0 && display.length !== 0 && <Remarks comments={comments} reports={display} />}\n                                {(!display.length || !comments.length) && <p className=\"text-center\"> No data for this criteria</p>}\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                    <Box pt={4}>\n                        <Copyright />\n                    </Box>\n                </Container>\n            </main>\n        </div>\n    );\n}","/home/suryu/AcademicPerformance/frontend/src/screens/Teacher.js",["59"],"import React, { useEffect, useState, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport SettingsPower from '@material-ui/icons/SettingsPower';\nimport Info from './Info';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Title from './Title';\nimport {useStore} from '../App';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright Â© '}\n            <Link color=\"inherit\" href=\"/\">\n                Performance Monitor\n      </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 36,\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 550,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n}));\n\nexport default function Dashboard() {\n    const classes = useStyles();\n    const history = useHistory();\n    const [studentId, setStudentId] = useState('');\n    const [subjectId, setSubjectId] = useState('');\n    const [comment, setComment] = useState('');\n    const [year, setYear] = useState('');\n    const [title1, setTitle1] = useState('');\n    const [title2, setTitle2] = useState('');\n    const [data, setData] = useState({});\n    const [subjects, setSubjects] = useState({});\n    const [obtainedMarks, setObtainedMarks] = useState('');\n    const [maximumMarks, setMaximumMarks] = useState('');\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n    const [open, setOpen] = useState(true);\n    const [showForm, setShowForm] = useState(true);\n\n    const user = useStore(useCallback(state => state.user, []));\n    const signOut = useStore(state => state.signOut);\n\n    const [message, setMessage] = useState('Logged In Successfully as ' + user.username);\n    const handleCreateReport = (event) => {\n        event.preventDefault();\n        const {token} = user;\n        axios.post('http://localhost:8080/api/reports/create', JSON.stringify({\n            studentId: studentId.toString(),\n            subjectId: subjectId.toString(),\n            year: year.toString(),\n            title: title1 + \" \" + title2,\n            obtainedMarks: obtainedMarks.toString(),\n            maximumMarks: maximumMarks.toString()\n        }), {\n            headers: {\n                'Authorization': 'Bearer ' + token,\n                'Content-Type': 'application/json',\n            }\n        }).then(response => {\n            if (response.data.payload != null && response.data.payload !== undefined) {\n                if (comment.length === 0) return;\n                axios.post('http://localhost:8080/api/comments/create', JSON.stringify({\n                    reportId: response.data.payload.toString(),\n                    description: comment.toString()\n                }), {\n                    headers: {\n                        'Authorization': 'Bearer ' + token,\n                        'Content-Type': 'application/json',\n                    }\n                }).then(response => {\n                    setMessage('Report Generated Successfully');\n                    setOpen(true);\n                })\n                    .catch(err => {\n                        setMessage('Please Check Form Details');\n                        setOpen(true);\n                    })\n            }\n            else {\n                setMessage('Please Check Form Details');\n                setOpen(true);\n            }\n        })\n            .catch(err => {\n                setMessage('Please Check Form Details');\n                setOpen(true);\n            });\n    }\n    useEffect(() => {\n        const {token} = user;\n        axios.get('http://localhost:8080/api/users/info/teacher', {\n            headers: {\n                'Authorization': 'Bearer ' + token,\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(response => {\n                setData(response.data.payload)\n            })\n            .catch(function (error) {\n                setMessage('Error Occurred');\n                setOpen(true);\n            })\n            .then(() => {\n                axios.get('http://localhost:8080/api/users/info/teacher-subject', {\n                    headers: {\n                        'Authorization': 'Bearer ' + token,\n                        'Content-Type': 'application/json',\n                    }\n                })\n                    .then(response => {\n                        setSubjects(response.data.payload)\n                        if (response.data.payload.length > 0)\n                            setSubjectId(response.data.payload[0])\n                        else {\n                            setMessage('No Subject Assigned');\n                            setOpen(true);\n                            setShowForm(false);\n                        }\n                    })\n                    .catch(function (error) {\n                        setMessage('Error Occurred');\n                        setOpen(true);\n                    })\n            })\n    }, []);\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={open}\n                autoHideDuration={6000}\n                onClose={() => setOpen(false)}\n                message={message}\n                action={\n                    <React.Fragment>\n                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => setOpen(false)}>\n                            <CloseIcon fontSize=\"small\" />\n                        </IconButton>\n                    </React.Fragment>\n                }\n            />\n            <AppBar position=\"absolute\" className={clsx(classes.appBar)}>\n                <Toolbar className={classes.toolbar}>\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                        Teacher Dashboard\n          </Typography>\n                    <IconButton color=\"inherit\" onClick={() => {signOut();history.push('/')}} >\n                        <SettingsPower />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <main className={classes.content}>\n                <div className={classes.appBarSpacer} />\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={8} lg={9}>\n                            <Paper className={fixedHeightPaper}>\n                                { showForm && <form className={classes.form} noValidate onSubmit={event => handleCreateReport(event)}>\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n                                        <Grid item xs={4}>\n                                            <FormControl variant=\"filled\" className={classes.formControl}>\n                                                <InputLabel htmlFor=\"subjectId\">Subject Id</InputLabel>\n                                                <Select\n                                                    native\n                                                    fullWidth\n                                                    value={subjectId}\n                                                    onChange={event => setSubjectId(event.target.value)}\n                                                    inputProps={{\n                                                        name: 'subjectId',\n                                                        id: 'subjectId',\n                                                    }}\n                                                >\n                                                    {\n                                                        subjects.length && subjects.map(subjectId => <option value={subjectId}>{subjectId}</option>)\n                                                    }\n                                                </Select>\n                                            </FormControl>\n                                        </Grid>\n                                        <Grid item xs={4}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                required\n                                                id=\"studentId\"\n                                                fullWidth\n                                                label=\"Student Id\"\n                                                name=\"studentId\"\n                                                autoComplete=\"studentId\"\n                                                autoFocus\n                                                value={studentId}\n                                                onChange={event => setStudentId(event.target.value)}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={4}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                required\n                                                name=\"year\"\n                                                label=\"Year\"\n                                                type=\"year\"\n                                                id=\"year\"\n                                                fullWidth\n                                                autoComplete=\"year\"\n                                                value={year}\n                                                onChange={event => setYear(event.target.value)}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container spacing={3} alignItems=\"center\" justify=\"center\">\n                                        <Grid item xs={3}>\n                                            <FormControl variant=\"filled\" className={classes.formControl}>\n                                                <InputLabel htmlFor=\"title1\">Type</InputLabel>\n                                                <Select\n                                                    native\n                                                    value={title1}\n                                                    onChange={event => setTitle1(event.target.value)}\n                                                    inputProps={{\n                                                        name: 'title1',\n                                                        id: 'title1',\n                                                    }}\n                                                >\n                                                    <option value=\"Weekly\">Weekly</option>\n                                                    <option value=\"Monthly\">Monthly</option>\n                                                    <option value=\"Yearly\">Yearly</option>\n                                                </Select>\n                                            </FormControl>\n                                        </Grid>\n                                        <Grid item xs={9}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                fullWidth\n                                                required\n                                                name=\"title2\"\n                                                label=\"Report Title\"\n                                                id=\"title2\"\n                                                autoComplete=\"title2\"\n                                                value={title2}\n                                                onChange={event => setTitle2(event.target.value)}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                required\n                                                fullWidth\n                                                id=\"obtainedMarks\"\n                                                label=\"Obtained Marks\"\n                                                name=\"obtainedMarks\"\n                                                autoComplete=\"obtainedMarks\"\n                                                autoFocus\n                                                value={obtainedMarks}\n                                                onChange={event => setObtainedMarks(event.target.value)}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                required\n                                                fullWidth\n                                                name=\"maximumMarks\"\n                                                label=\"Maximum Marks\"\n                                                id=\"maximumMarks\"\n                                                autoComplete=\"maximumMarks\"\n                                                value={maximumMarks}\n                                                onChange={event => setMaximumMarks(event.target.value)}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n                                        <Grid item xs={12}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                name=\"comment\"\n                                                multiline\n                                                rows={4}\n                                                fullWidth\n                                                label=\"Remarks (Optional)\"\n                                                id=\"comment\"\n                                                autoComplete=\"comment\"\n                                                value={comment}\n                                                onChange={event => setComment(event.target.value)}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                    <Button\n                                        type=\"submit\"\n                                        fullWidth\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={classes.submit}\n                                    >\n                                        Generate Report\n                                    </Button>\n                                </form>}\n                                {!showForm && \n                                <Title>No subjects are assigned to you yet!</Title>}\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={12} md={4} lg={3}>\n                            <Paper className={fixedHeightPaper}>\n                                <Info teacherId={data.teacherId} userId={data.userId} />\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                    <Box pt={4}>\n                        <Copyright />\n                    </Box>\n                </Container>\n            </main>\n        </div>\n    );\n}\n","/home/suryu/AcademicPerformance/frontend/src/screens/Admin.js",["60"],"import React, { useEffect, useState, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport SettingsPower from '@material-ui/icons/SettingsPower';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport HomeIcon from '@material-ui/icons/Home';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport {useStore} from '../App';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright Â© '}\n            <Link color=\"inherit\" href=\"/\">\n                Performance Monitor\n      </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 36,\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight1: {\n        height: 250,\n    },\n    fixedHeight: {\n        height: 550,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(12),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n}));\n\nexport default function Admin() {\n    const classes = useStyles();\n    const history = useHistory();\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n    const fixedHeightPaper1 = clsx(classes.paper, classes.fixedHeight1);\n    const [name, setName] = useState('');\n    const [subjectId, setSubjectId] = useState('');\n    const [teacherId, setTeacherId] = useState('');\n    const [username, setUsername] = useState('');\n    const [firstName, setFirstName] = useState('');\n    const [kind, setKind] = useState('teacher');\n    const [lastName, setLastName] = useState('');\n    const [address, setAddress] = useState('');\n    const [dob, setDob] = useState('');\n    const [year, setYear] = useState('');\n    const [open, setOpen] = useState(true);\n    const [drawer, setDrawer] = useState(true);\n    const [message, setMessage] = useState('Logged In Successfully as admin');\n    const [selected, setSelected] = useState(0);\n    const [tab, setTab] = useState('create');\n    const [teachers, setTeachers] = useState([]);\n    const [subjects, setSubjects] = useState([]);\n    const [assigned, setAssigned] = useState([]);\n\n    const user = useStore(useCallback(state => state.user, []));\n    const signOut = useStore(state => state.signOut);\n\n    const handleDrawerOpen = () => {\n        setDrawer(true);\n    };\n    const handleDrawerClose = () => {\n        setDrawer(false);\n    };\n\n    useEffect(() => {\n        const {token} = user;\n        axios.get('http://localhost:8080/api/users/info/teachers', {\n            headers: {\n                'Authorization': 'Bearer ' + token,\n                'Content-Type': 'application/json',\n            }\n        }).then(response => {\n            //console.log(response);\n            setTeachers(response.data.payload);\n        })\n            .catch(err => console.log(err));\n\n        axios.get('http://localhost:8080/api/subjects/info', {\n            headers: {\n                'Authorization': 'Bearer ' + token,\n                'Content-Type': 'application/json',\n            }\n        }).then(response => {\n            setSubjects(response.data.payload);\n        })\n            .catch(err => console.log(err));\n    }, []);\n    const handleSubjectCreate = event => {\n        event.preventDefault();\n        const {token} = user;\n        axios.post('http://localhost:8080/api/subjects/add', JSON.stringify({\n            name: name.toString()\n        }), {\n            headers: {\n                'Authorization': 'Bearer ' + token,\n                'Content-Type': 'application/json',\n            }\n        }).then(response => {\n            //console.log(response);\n            setMessage('Subject Generated Successfully');\n            setOpen(true);\n        })\n            .catch(err => {\n                console.log(err);\n                setMessage('Please check form details');\n                setOpen(true);\n            })\n\n    }\n    const handleSubjectAssign = event => {\n        event.preventDefault();\n        const {token} = user;\n        axios.post('http://localhost:8080/api/subjects/assign', JSON.stringify({\n            subjectId: subjectId.toString(),\n            teacherId: teacherId.toString()\n        }), {\n            headers: {\n                'Authorization': 'Bearer ' + token,\n                'Content-Type': 'application/json',\n            }\n        }).then(response => {\n            //console.log(response);\n            setMessage('Subject Assigned Successfully');\n            setOpen(true);\n        })\n            .catch(err => {\n                console.log(err);\n                setMessage('Please check form details');\n                setOpen(true);\n            })\n    }\n\n    const handleShowAssigned = teacherId => {\n        const {token} = user;\n        axios.post('http://localhost:8080/api/users/info/teacher-subject', JSON.stringify({\n            teacherId: teacherId.toString()\n        }), {\n            headers: {\n                'Authorization': 'Bearer ' + token,\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(response => {\n                //console.log(response);\n                setAssigned(response.data.payload)\n                setMessage('Assigned Subjects List Fetched!');\n                if(response.data.payload.length === 0) {\n                    setMessage('No subjects assigned to the requested teacher');\n                }\n                setOpen(true);\n            })\n            .catch(function (error) {\n                console.log(error);\n                setMessage('Error Occurred');\n                setOpen(true);\n            })\n    }\n    const handleUserCreate = event => {\n        event.preventDefault();\n        const {token} = user;\n        let data = {\n            firstName, lastName, kind, username, password: 'test123'\n        }\n        if (kind === 'student') {\n            data = { ...data, address, dob, year };\n        }\n        axios.post('http://localhost:8080/api/users/create', JSON.stringify(\n            data\n        ), {\n            headers: {\n                'Authorization': 'Bearer ' + token,\n                'Content-Type': 'application/json',\n            }\n        }).then(response => {\n            //console.log(response);\n            setMessage('User Generated Successfully');\n            setOpen(true);\n        })\n            .catch(err => {\n                console.log(err);\n                setMessage('Please check form details');\n                setOpen(true);\n            })\n    }\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={open}\n                autoHideDuration={6000}\n                onClose={() => setOpen(false)}\n                message={message}\n                action={\n                    <React.Fragment>\n                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => setOpen(false)}>\n                            <CloseIcon fontSize=\"small\" />\n                        </IconButton>\n                    </React.Fragment>\n                }\n            />\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, drawer && classes.appBarShift)}>\n                <Toolbar className={classes.toolbar}>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        className={clsx(classes.menuButton, drawer && classes.menuButtonHidden)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                        Student Dashboard\n          </Typography>\n                    <IconButton color=\"inherit\" onClick={() => {signOut(); history.push('/')}} >\n                        <SettingsPower />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                classes={{\n                    paper: clsx(classes.drawerPaper, !drawer && classes.drawerPaperClose),\n                }}\n                open={drawer}\n            >\n                <div className={classes.toolbarIcon}>\n                    <IconButton onClick={handleDrawerClose}>\n                        <ChevronLeftIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    <ListItem button onClick={() => { setSelected(0); setTab('create'); }} selected={selected === 0}>\n                        <ListItemIcon>\n                            <HomeIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Creation Panel\" />\n                    </ListItem>\n                    <ListItem button onClick={() => { setSelected(1); setTab('teachers'); }} selected={selected === 1}>\n                        <ListItemIcon>\n                            <AccountCircleIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Available Teachers\" />\n                    </ListItem>\n                    <ListItem button onClick={() => { setSelected(2); setTab('subjects'); }} selected={selected === 2}>\n                        <ListItemIcon>\n                            <SubjectIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Available Subjects\" />\n                    </ListItem>\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.appBarSpacer} />\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    {tab === 'create' && <Grid container spacing={3}>\n                        <Grid item xs={6}>\n                            <Paper className={fixedHeightPaper1}>\n                                <form className={classes.form} noValidate onSubmit={event => handleSubjectCreate(event)}>\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n                                        <Grid item xs={12}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                required\n                                                id=\"name\"\n                                                fullWidth\n                                                label=\"Subject Name\"\n                                                name=\"name\"\n                                                autoComplete=\"name\"\n                                                autoFocus\n                                                value={name}\n                                                onChange={event => setName(event.target.value)}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                type=\"submit\"\n                                                fullWidth\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.submit}\n                                            >\n                                                Create Subject\n                                    </Button>\n                                        </Grid>\n                                    </Grid>\n                                </form>\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Paper className={fixedHeightPaper1}>\n                                <form className={classes.form} noValidate onSubmit={event => handleSubjectAssign(event)}>\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                required\n                                                id=\"subjectId\"\n                                                fullWidth\n                                                label=\"Subject Id\"\n                                                name=\"subjectId\"\n                                                autoComplete=\"subjectId\"\n                                                autoFocus\n                                                value={subjectId}\n                                                onChange={event => setSubjectId(event.target.value)}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                required\n                                                id=\"teacherId\"\n                                                fullWidth\n                                                label=\"Teacher Id\"\n                                                name=\"teacherId\"\n                                                autoComplete=\"teacherId\"\n                                                autoFocus\n                                                value={teacherId}\n                                                onChange={event => setTeacherId(event.target.value)}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                type=\"submit\"\n                                                fullWidth\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.submit}\n                                            >\n                                                Assign Subject\n                                    </Button>\n                                        </Grid>\n                                    </Grid>\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>}\n                    {tab === 'create' && <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <Paper className={classes.paper}>\n                                <form className={classes.form} noValidate onSubmit={event => handleUserCreate(event)}>\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                required\n                                                id=\"firstName\"\n                                                fullWidth\n                                                label=\"First Name\"\n                                                name=\"firstName\"\n                                                autoComplete=\"firstName\"\n                                                autoFocus\n                                                value={firstName}\n                                                onChange={event => setFirstName(event.target.value)}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                required\n                                                id=\"lastName\"\n                                                fullWidth\n                                                label=\"Last Name\"\n                                                name=\"lastName\"\n                                                autoComplete=\"lastName\"\n                                                autoFocus\n                                                value={lastName}\n                                                onChange={event => setLastName(event.target.value)}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={4}>\n                                            <FormControl variant=\"filled\" className={classes.formControl}>\n                                                <InputLabel htmlFor=\"kind\">User Type</InputLabel>\n                                                <Select\n                                                    native\n                                                    fullWidth\n                                                    value={kind}\n                                                    onChange={event => setKind(event.target.value)}\n                                                    inputProps={{\n                                                        name: 'kind',\n                                                        id: 'kind',\n                                                    }}\n                                                >\n                                                    <option value=\"teacher\">Teacher</option>\n                                                    <option value=\"student\">Student</option>\n                                                </Select>\n                                            </FormControl>\n                                        </Grid>\n                                        <Grid item xs={8}>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                required\n                                                id=\"username\"\n                                                fullWidth\n                                                label=\"Username\"\n                                                name=\"username\"\n                                                autoComplete=\"username\"\n                                                autoFocus\n                                                value={username}\n                                                onChange={event => setUsername(event.target.value)}\n                                            />\n                                        </Grid>\n                                        {\n                                            kind === 'student' &&\n                                            <Grid item xs={4}>\n                                                <TextField\n                                                    variant=\"outlined\"\n                                                    margin=\"normal\"\n                                                    required\n                                                    id=\"address\"\n                                                    fullWidth\n                                                    label=\"Address\"\n                                                    name=\"address\"\n                                                    autoComplete=\"address\"\n                                                    autoFocus\n                                                    value={address}\n                                                    onChange={event => setAddress(event.target.value)}\n                                                />\n                                            </Grid>\n                                        }\n                                        {\n                                            kind === 'student' &&\n                                            <Grid item xs={4}>\n                                                <TextField\n                                                    variant=\"outlined\"\n                                                    margin=\"normal\"\n                                                    required\n                                                    id=\"dob\"\n                                                    fullWidth\n                                                    label=\"Dob\"\n                                                    name=\"dob\"\n                                                    autoComplete=\"dob\"\n                                                    autoFocus\n                                                    value={dob}\n                                                    onChange={event => setDob(event.target.value)}\n                                                />\n                                            </Grid>\n                                        }\n                                        {\n                                            kind === 'student' &&\n                                            <Grid item xs={4}>\n                                                <TextField\n                                                    variant=\"outlined\"\n                                                    margin=\"normal\"\n                                                    required\n                                                    id=\"year\"\n                                                    fullWidth\n                                                    label=\"Year\"\n                                                    name=\"year\"\n                                                    autoComplete=\"year\"\n                                                    autoFocus\n                                                    value={year}\n                                                    onChange={event => setYear(event.target.value)}\n                                                />\n                                            </Grid>\n                                        }\n                                        <Grid item xs={6}>\n                                            <Button\n                                                type=\"submit\"\n                                                fullWidth\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.submit}\n                                            >\n                                                Create User\n                                    </Button>\n                                        </Grid>\n                                    </Grid>\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>}\n                    {tab === 'teachers' && <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n                        <Grid item xs={8}>\n                            <Paper className={fixedHeightPaper}>\n                                <Title>Teachers</Title>\n                                <Table>\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell>User Id</TableCell>\n                                            <TableCell>Teacher Id</TableCell>\n                                            <TableCell>Name</TableCell>\n                                            <TableCell>Assigned Subjects</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {teachers.map((teacher, idx) => {\n                                            return (\n                                                <TableRow key={idx}>\n                                                    <TableCell>{teacher.userId}</TableCell>\n                                                    <TableCell>{teacher.teacherId}</TableCell>\n                                                    <TableCell>{teacher.name}</TableCell>\n                                                    <TableCell>\n                                                        <Button\n                                                            color=\"primary\"\n                                                            onClick={() => handleShowAssigned(teacher.teacherId)}\n                                                        >\n                                                            View\n                                                        </Button>\n                                                    </TableCell>\n                                                </TableRow>\n                                            );\n                                        })}\n                                    </TableBody>\n                                </Table>\n                            </Paper>\n                        </Grid>\n                        {\n                            assigned.length !== 0 && <Grid item xs={3}>\n                                <Paper>\n                                    <Grid container justify=\"center\" alignItems=\"center\">\n                                        <Grid item>\n                                            <Title>Assigned Subjects</Title>\n                                            <Table size=\"small\">\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell>Subject Id</TableCell>\n                                                        <TableCell>Name</TableCell>\n                                                    </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n                                                    {assigned.map(({subjectId, name}, idx) => {\n                                                        return (\n                                                            <TableRow key={idx}>\n                                                                <TableCell>{subjectId}</TableCell>\n                                                                <TableCell>{name}</TableCell>\n                                                            </TableRow>\n                                                        );\n                                                    })}\n                                                </TableBody>\n                                            </Table>\n                                        </Grid>\n                                    </Grid>\n                                </Paper>\n                            </Grid>\n                        }\n                    </Grid>\n                    }\n                    {tab === 'subjects' && <Grid container spacing={3} justify=\"center\">\n                        <Grid item xs={6}>\n                            <Paper className={fixedHeightPaper}>\n                                <Title>Subjects</Title>\n                                <Table>\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell>Subject Id</TableCell>\n                                            <TableCell>Name</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {subjects.map((subject, idx) => {\n                                            return (\n                                                <TableRow key={idx}>\n                                                    <TableCell>{subject.subjectId}</TableCell>\n                                                    <TableCell>{subject.name}</TableCell>\n                                                </TableRow>\n                                            );\n                                        })}\n                                    </TableBody>\n                                </Table>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                    }\n                    <Box pt={4}>\n                        <Copyright />\n                    </Box>\n                </Container>\n            </main>\n        </div>\n    );\n}\n\n\n","/home/suryu/AcademicPerformance/frontend/src/screens/Chart.js",[],"/home/suryu/AcademicPerformance/frontend/src/screens/Info.js",[],"/home/suryu/AcademicPerformance/frontend/src/screens/Remarks.js",[],["61","62"],"/home/suryu/AcademicPerformance/frontend/src/screens/Title.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":28,"nodeType":"69","messageId":"70","endLine":1,"endColumn":36},{"ruleId":"67","severity":1,"message":"71","line":62,"column":11,"nodeType":"69","messageId":"70","endLine":62,"endColumn":16},{"ruleId":"72","severity":1,"message":"73","line":68,"column":8,"nodeType":"74","endLine":68,"endColumn":10,"suggestions":"75"},{"ruleId":"72","severity":1,"message":"76","line":188,"column":8,"nodeType":"74","endLine":188,"endColumn":10,"suggestions":"77"},{"ruleId":"72","severity":1,"message":"76","line":200,"column":8,"nodeType":"74","endLine":200,"endColumn":10,"suggestions":"78"},{"ruleId":"72","severity":1,"message":"76","line":206,"column":8,"nodeType":"74","endLine":206,"endColumn":10,"suggestions":"79"},{"ruleId":"63","replacedBy":"80"},{"ruleId":"65","replacedBy":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'fetch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["84"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["85"],["86"],["87"],["82"],["83"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"90","fix":"92"},{"desc":"90","fix":"93"},"Update the dependencies array to be: [history, user]",{"range":"94","text":"95"},"Update the dependencies array to be: [user]",{"range":"96","text":"97"},{"range":"98","text":"97"},{"range":"99","text":"97"},[2156,2158],"[history, user]",[6377,6379],"[user]",[7014,7016],[6949,6951]]